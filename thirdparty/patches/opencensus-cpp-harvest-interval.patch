diff --git a/opencensus/stats/internal/delta_producer.cc b/opencensus/stats/internal/delta_producer.cc
index c61b4d9..b1bceba 100644
--- a/opencensus/stats/internal/delta_producer.cc
+++ b/opencensus/stats/internal/delta_producer.cc
@@ -117,6 +117,10 @@ void DeltaProducer::Flush() {
 DeltaProducer::DeltaProducer()
     : harvester_thread_(&DeltaProducer::RunHarvesterLoop, this) {}
 
+void DeltaProducer::SetHarvestInterval(const absl::Duration interval) {
+  harvest_interval_ = interval;
+}
+
 void DeltaProducer::SwapDeltas() {
   ABSL_ASSERT(last_delta_.delta().empty() && "Last delta was not consumed.");
   active_delta_.SwapAndReset(registered_boundaries_, &last_delta_);
diff --git a/opencensus/stats/internal/delta_producer.h b/opencensus/stats/internal/delta_producer.h
index bec5605..e565f6a 100644
--- a/opencensus/stats/internal/delta_producer.h
+++ b/opencensus/stats/internal/delta_producer.h
@@ -84,6 +84,8 @@ class DeltaProducer final {
   // Flushes the active delta and blocks until it is harvested.
   void Flush() ABSL_LOCKS_EXCLUDED(delta_mu_, harvester_mu_);
 
+  void SetHarvestInterval(const absl::Duration interval);
+
  private:
   DeltaProducer();
 
@@ -100,7 +102,7 @@ class DeltaProducer final {
   // every harvest_interval_.
   void RunHarvesterLoop();
 
-  const absl::Duration harvest_interval_ = absl::Seconds(5);
+  absl::Duration harvest_interval_ = absl::Seconds(5);
 
   // Guards the active delta and its configuration. Anything that changes the
   // delta configuration (e.g. adding a measure or BucketBoundaries) must

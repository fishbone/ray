Objects fault tolerance
=======================

There are two components involved for an object, the data and the metadata.
The data is stored in the object store and the metadata is stored in the
:ref:`owner <fault-tolerance_ownership>` of the object.

Lost in the object store
------------------------

When the object is lost in the object store, Ray will use
*lineage reconstruction* to recover the object. This can occur during node
failures. Ray will first automatically attempt to recover the value by looking
for copies of the same object on other nodes. If none are found, then Ray will
automatically recover the value by re-executing the task that created the value.
Arguments to the task are recursively reconstructed with the same method. What's
worth noting here is that Ray is not able to recover the objects not generated
by tasks, for example, the object which is generated by ``ray.put``.

Note that lineage reconstruction can cause higher than usual driver memory
usage because the driver keeps the descriptions of any tasks that may be
re-executed in case of failure. To limit the amount of memory used by
lineage, set the environment variable ``RAY_max_lineage_bytes`` (default 1GB)
to evict lineage if the threshold is exceeded. To disable this behavior, set 
the environment variable ``RAY_lineage_pinning_enabled=0`` during ``ray start`` 
or ``ray.init``.  With this setting, if there are no copies of an object left, an
``ObjectLostError`` will be raised.

The owner of the object died
----------------------------

The :ref:`owner <fault-tolerance_ownership>` of the object can die because of a
node failure, a raylet failure or some tasks scheduled on the worker fail the
worker. When the owner died, this object will be lost and we'll not be able to
get the object back.
